(function() {
  var csv, fs, should;
  fs = require('fs');
  should = require('should');
  csv = require('..');
  describe('lineBreaks', function() {
    it('Test line breaks custom', function() {
      return csv().fromPath("" + __dirname + "/lineBreaks/lineBreaks.in").toPath("" + __dirname + "/lineBreaks/custom.tmp", {
        lineBreaks: '::'
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/lineBreaks/custom.out").toString();
        result = fs.readFileSync("" + __dirname + "/lineBreaks/custom.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/lineBreaks/custom.tmp");
      });
    });
    it('Test line breaks unix', function() {
      return csv().fromPath("" + __dirname + "/lineBreaks/lineBreaks.in").toPath("" + __dirname + "/lineBreaks/unix.tmp", {
        lineBreaks: "unix"
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/lineBreaks/unix.out").toString();
        result = fs.readFileSync("" + __dirname + "/lineBreaks/unix.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/lineBreaks/unix.tmp");
      });
    });
    it('Test line breaks unicode', function() {
      return csv().fromPath("" + __dirname + "/lineBreaks/lineBreaks.in").toPath("" + __dirname + "/lineBreaks/unicode.tmp", {
        lineBreaks: 'unicode'
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/lineBreaks/unicode.out").toString();
        result = fs.readFileSync("" + __dirname + "/lineBreaks/unicode.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/lineBreaks/unicode.tmp");
      });
    });
    it('Test line breaks mac', function() {
      return csv().fromPath("" + __dirname + "/lineBreaks/lineBreaks.in").toPath("" + __dirname + "/lineBreaks/mac.tmp", {
        lineBreaks: 'mac'
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/lineBreaks/mac.out").toString();
        result = fs.readFileSync("" + __dirname + "/lineBreaks/mac.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/lineBreaks/mac.tmp");
      });
    });
    return it('Test line breaks windows', function() {
      return csv().fromPath("" + __dirname + "/lineBreaks/lineBreaks.in").toPath("" + __dirname + "/lineBreaks/windows.tmp", {
        lineBreaks: 'windows'
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/lineBreaks/windows.out").toString();
        result = fs.readFileSync("" + __dirname + "/lineBreaks/windows.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/lineBreaks/windows.tmp");
      });
    });
  });
}).call(this);
