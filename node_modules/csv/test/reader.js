(function() {
  var csv, fs, should;
  fs = require('fs');
  should = require('should');
  csv = require('..');
  describe('reader', function() {
    it('should call data event when data is provided in from', function(next) {
      return csv().from('"1","2","3","4","5"').on('data', function(data) {
        return data.length.should.eql(5);
      }).on('end', function() {
        return next();
      });
    });
    it('should include empty last column', function(next) {
      return csv().from('"1","2","3","4","5",').on('data', function(data) {
        return data.length.should.eql(6);
      }).on('end', function() {
        return next();
      });
    });
    it('should include empty last column surrounded by quotes', function(next) {
      return csv().from('"1","2","3","4","5",""').on('data', function(data) {
        return data.length.should.eql(6);
      }).on('end', function() {
        return next();
      });
    });
    it('should include empty last column if followed by linebreak', function(next) {
      return csv().from('"1","2","3","4","5",""\n').on('data', function(data) {
        return data.length.should.eql(6);
      }).on('end', function() {
        return next();
      });
    });
    return it('should call error event if exception is thrown in data event', function(next) {
      var count, errors, i, test, _results;
      count = 0;
      errors = 0;
      test = csv().toPath("" + __dirname + "/write/write_array.tmp").on('data', function(data, index) {
        if (index % 10 === 0) {
          throw new Error("Error in data " + index);
        }
      }).on('error', function(e) {
        e.message.should.equal('Error in data 0');
        return next();
      }).on('end', function() {
        return false.should.be.ok;
      });
      _results = [];
      for (i = 0; i < 1000; i++) {
        _results.push(test.writable ? test.write(['Test ' + i, i, '"']) : void 0);
      }
      return _results;
    });
  });
}).call(this);
