(function() {
  var csv, fs, should;
  fs = require('fs');
  should = require('should');
  csv = require('..');
  describe('quotes', function() {
    it('Test regular quotes', function() {
      return csv().fromPath("" + __dirname + "/quotes/regular.in").toPath("" + __dirname + "/quotes/regular.tmp").on('end', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/quotes/regular.out").toString();
        result = fs.readFileSync("" + __dirname + "/quotes/regular.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/quotes/regular.tmp");
      });
    });
    it('should read quoted values containing delimiters and write around quote only the value containing delimiters', function() {
      return csv().fromPath("" + __dirname + "/quotes/delimiter.in").toPath("" + __dirname + "/quotes/delimiter.tmp").on('end', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/quotes/delimiter.out").toString();
        result = fs.readFileSync("" + __dirname + "/quotes/delimiter.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/quotes/delimiter.tmp");
      });
    });
    it('Test quotes inside field', function() {
      return csv().fromPath("" + __dirname + "/quotes/in_field.in").toPath("" + __dirname + "/quotes/in_field.tmp").on('end', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/quotes/in_field.out").toString();
        result = fs.readFileSync("" + __dirname + "/quotes/in_field.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/quotes/in_field.tmp");
      });
    });
    it('Test empty value', function() {
      return csv().fromPath("" + __dirname + "/quotes/empty_value.in", {
        quote: '"',
        escape: '"'
      }).toPath("" + __dirname + "/quotes/empty_value.tmp").on('end', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/quotes/empty_value.out").toString();
        result = fs.readFileSync("" + __dirname + "/quotes/empty_value.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/quotes/empty_value.tmp");
      });
    });
    it('should read values with quotes, escaped as double quotes, and write empty values as not quoted', function() {
      return csv().fromPath("" + __dirname + "/quotes/contains_quotes.in", {
        quote: '"',
        escape: '"'
      }).toPath("" + __dirname + "/quotes/contains_quotes.tmp").on('data', function(data, index) {
        data.length.should.eql(5);
        if (index === 0) {
          data[1].should.eql('"');
          return data[4].should.eql('"ok"');
        }
      }).on('end', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/quotes/contains_quotes.out").toString();
        result = fs.readFileSync("" + __dirname + "/quotes/contains_quotes.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/quotes/contains_quotes.tmp");
      });
    });
    it('should accept line breaks inside quotes', function() {
      return csv().fromPath("" + __dirname + "/quotes/linebreak.in", {
        quote: '"',
        escape: '"'
      }).toPath("" + __dirname + "/quotes/linebreak.tmp").on('data', function(data, index) {
        return data.length.should.eql(5);
      }).on('end', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/quotes/linebreak.out").toString();
        result = fs.readFileSync("" + __dirname + "/quotes/linebreak.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/quotes/linebreak.tmp");
      });
    });
    it('Test unclosed quote', function(next) {
      return csv().fromPath("" + __dirname + "/quotes/unclosed.in", {
        quote: '"',
        escape: '"'
      }).toPath("" + __dirname + "/quotes/unclosed.tmp").on('end', function() {
        return false.should.be.ok;
      }).on('error', function(e) {
        e.message.should.eql('Quoted field not terminated');
        fs.unlink("" + __dirname + "/quotes/unclosed.tmp");
        return next();
      });
    });
    it('Test invalid quotes', function(next) {
      return csv().fromPath("" + __dirname + "/quotes/invalid.in", {
        quote: '"',
        escape: '"'
      }).toPath("" + __dirname + "/quotes/invalid.tmp").on('end', function() {
        return false.should.be.ok;
      }).on('error', function(e) {
        e.message.should.match(/Invalid closing quote/);
        fs.unlink("" + __dirname + "/quotes/invalid.tmp");
        return next();
      });
    });
    it('Test invalid quotes from string', function(next) {
      return csv().from('"",1974,8.8392926E7,""t,""', {
        quote: '"',
        escape: '"'
      }).toPath("" + __dirname + "/quotes/invalidstring.tmp").on('end', function() {
        return false.should.be.ok;
      }).on('error', function(e) {
        e.message.should.match(/Invalid closing quote/);
        fs.unlink("" + __dirname + "/quotes/invalidstring.tmp");
        return next();
      });
    });
    return it('should quotes all fields', function(next) {
      return csv().fromPath("" + __dirname + "/quotes/quoted.in").toPath("" + __dirname + "/quotes/quoted.tmp", {
        quoted: true
      }).on('end', function() {
        var expect, result;
        expect = fs.readFileSync("" + __dirname + "/quotes/quoted.out").toString();
        result = fs.readFileSync("" + __dirname + "/quotes/quoted.tmp").toString();
        result.should.eql(expect);
        fs.unlink("" + __dirname + "/quotes/quoted.tmp");
        return next();
      }).on('error', function(e) {
        return false.should.be.ok;
      });
    });
  });
}).call(this);
