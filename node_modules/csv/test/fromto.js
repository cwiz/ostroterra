(function() {
  var csv, fs, should;
  fs = require('fs');
  should = require('should');
  csv = require('..');
  describe('fromto', function() {
    it('Test fs stream', function(next) {
      return csv().fromStream(fs.createReadStream("" + __dirname + "/fromto/sample.in", {
        flags: 'r'
      })).toStream(fs.createWriteStream("" + __dirname + "/fromto/sample.tmp", {
        flags: 'w'
      })).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/fromto/sample.out").toString();
        result = fs.readFileSync("" + __dirname + "/fromto/sample.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/fromto/sample.tmp", next);
      });
    });
    it('Test string without destination', function(next) {
      return csv().from(fs.readFileSync("" + __dirname + "/fromto/sample.in").toString()).on('data', function(data, index) {
        index.should.be.below(2);
        if (index === 0) {
          return data[0].should.eql('20322051544');
        } else if (index === 1) {
          return data[0].should.eql('28392898392');
        }
      }).on('end', function(count) {
        count.should.eql(2);
        return next();
      });
    });
    it('Test string to stream', function(next) {
      return csv().from(fs.readFileSync("" + __dirname + "/fromto/string_to_stream.in").toString()).toPath("" + __dirname + "/fromto/string_to_stream.tmp").on('data', function(data, index) {
        index.should.be.below(2);
        if (index === 0) {
          return data[0].should.eql('20322051544');
        } else if (index === 1) {
          return data[0].should.eql('28392898392');
        }
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/fromto/string_to_stream.out").toString();
        result = fs.readFileSync("" + __dirname + "/fromto/string_to_stream.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/fromto/string_to_stream.tmp", next);
      });
    });
    it('Test array to stream', function(next) {
      var data;
      data = [["20322051544", "1979.0", "8.8017226E7", "ABC", "45", "2000-01-01"], ["28392898392", "1974.0", "8.8392926E7", "DEF", "23", "2050-11-27"]];
      return csv().from(data).toPath("" + __dirname + "/fromto/array_to_stream.tmp").on('data', function(data, index) {
        index.should.be.below(2);
        if (index === 0) {
          return data[0].should.eql('20322051544');
        } else if (index === 1) {
          return data[0].should.eql('28392898392');
        }
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/fromto/array_to_stream.out").toString();
        result = fs.readFileSync("" + __dirname + "/fromto/array_to_stream.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/fromto/array_to_stream.tmp", next);
      });
    });
    return it('should encode null as empty string', function(next) {
      var data;
      data = [["20322051544", null, "8.8017226E7", "ABC", "45", "2000-01-01"], ["28392898392", "1974.0", "8.8392926E7", "DEF", "23", null]];
      return csv().from(data).transform(function(data) {
        data[0] = null;
        data[3] = null;
        return data;
      }).toPath("" + __dirname + "/fromto/null.tmp").on('data', function(data, index) {
        index.should.be.below(2);
        should.not.exist(data[0]);
        should.not.exist(data[3]);
        if (index === 0) {
          return should.not.exist(data[1]);
        } else if (index === 1) {
          return should.not.exist(data[5]);
        }
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/fromto/null.out").toString();
        result = fs.readFileSync("" + __dirname + "/fromto/null.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/fromto/null.tmp", next);
      });
    });
  });
}).call(this);
