(function() {
  var csv, fs, should;
  fs = require('fs');
  should = require('should');
  csv = require('..');
  describe('delimiter', function() {
    it('Test empty value', function() {
      return csv().fromPath("" + __dirname + "/delimiter/empty_value.in").toPath("" + __dirname + "/delimiter/empty_value.tmp").transform(function(data, index) {
        data.length.should.eql(5);
        if (index === 0) {
          data[1].should.eql('');
          data[4].should.eql('');
        } else if (index === 1) {
          data[0].should.eql('');
          data[3].should.eql('');
          data[4].should.eql('');
        }
        return data;
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/delimiter/empty_value.out").toString();
        result = fs.readFileSync("" + __dirname + "/delimiter/empty_value.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/delimiter/empty_value.tmp");
      });
    });
    return it('Test tabs to comma', function() {
      return csv().fromPath("" + __dirname + "/delimiter/tab_to_coma.in", {
        delimiter: '\t'
      }).toPath("" + __dirname + "/delimiter/tab_to_coma.tmp", {
        delimiter: ','
      }).transform(function(data, index) {
        data.length.should.eql(5);
        if (index === 0) {
          data[1].should.eql('');
          data[4].should.eql('');
        } else if (index === 1) {
          data[0].should.eql('');
          data[3].should.eql('');
          data[4].should.eql('');
        }
        return data;
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/delimiter/tab_to_coma.out").toString();
        result = fs.readFileSync("" + __dirname + "/delimiter/tab_to_coma.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/delimiter/tab_to_coma.tmp");
      });
    });
  });
}).call(this);
