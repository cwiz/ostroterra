(function() {
  var csv, fs, should;
  fs = require('fs');
  should = require('should');
  csv = require('..');
  describe('transform', function() {
    it('Test reorder fields', function(next) {
      var count;
      count = 0;
      return csv().fromPath("" + __dirname + "/transform/reorder.in").toPath("" + __dirname + "/transform/reorder.tmp").transform(function(data, index) {
        count.should.eql(index);
        count++;
        data.unshift(data.pop());
        return data;
      }).on('end', function() {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/reorder.out").toString();
        result = fs.readFileSync("" + __dirname + "/transform/reorder.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/reorder.tmp", next);
      });
    });
    it('should skip all lines where transform return undefined', function(next) {
      var count;
      count = 0;
      return csv().fromPath("" + __dirname + "/transform/undefined.in").toPath("" + __dirname + "/transform/undefined.tmp").transform(function(data, index) {
        count.should.eql(index);
        count++;
      }).on('end', function() {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/undefined.out").toString();
        result = fs.readFileSync("" + __dirname + "/transform/undefined.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/undefined.tmp", next);
      });
    });
    it('should skip all lines where transform return null', function(next) {
      var count;
      count = 0;
      return csv().fromPath("" + __dirname + "/transform/null.in").toPath("" + __dirname + "/transform/null.tmp").transform(function(data, index) {
        count.should.eql(index);
        count++;
        if (index % 2) {
          return data;
        } else {
          return null;
        }
      }).on('end', function() {
        var expect, result;
        count.should.eql(6);
        expect = fs.readFileSync("" + __dirname + "/transform/null.out").toString();
        result = fs.readFileSync("" + __dirname + "/transform/null.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/null.tmp", next);
      });
    });
    it('Test return object', function(next) {
      return csv().fromPath("" + __dirname + "/transform/object.in").toPath("" + __dirname + "/transform/object.tmp").transform(function(data, index) {
        return {
          field_1: data[4],
          field_2: data[3]
        };
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/object.out").toString();
        result = fs.readFileSync("" + __dirname + "/transform/object.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/object.tmp", next);
      });
    });
    it('should accept a returned string', function(next) {
      return csv().fromPath("" + __dirname + "/transform/string.in").toPath("" + __dirname + "/transform/string.tmp").transform(function(data, index) {
        return (index > 0 ? ',' : '') + data[4] + ":" + data[3];
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/string.out").toString();
        result = fs.readFileSync("" + __dirname + "/transform/string.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/string.tmp", next);
      });
    });
    it('should accept a returned integer', function(next) {
      var i, result, test;
      result = '';
      test = csv().transform(function(data, index) {
        return data[1];
      }).on('data', function(data) {
        return result += data;
      }).on('end', function() {
        result.should.eql('210');
        return next();
      });
      for (i = 2; i >= 0; i--) {
        test.write(['Test ' + i, i, '"']);
      }
      return test.end();
    });
    it('should accept a returned array with different types', function(next) {
      return csv().fromPath("" + __dirname + "/transform/types.in").toPath("" + __dirname + "/transform/types.tmp").transform(function(data, index) {
        data[3] = data[3].split('-');
        return [parseInt(data[0]), parseFloat(data[1]), parseFloat(data[2]), Date.UTC(data[3][0], data[3][1], data[3][2]), !!data[4], !!data[5]];
      }).on('end', function(count) {
        var expect, result;
        count.should.eql(2);
        expect = fs.readFileSync("" + __dirname + "/transform/types.out").toString();
        result = fs.readFileSync("" + __dirname + "/transform/types.tmp").toString();
        result.should.eql(expect);
        return fs.unlink("" + __dirname + "/transform/types.tmp", next);
      });
    });
    return it('should catch error thrown in transform callback', function(next) {
      var count, error, i, test, _results;
      count = 0;
      error = false;
      test = csv().toPath("" + __dirname + "/write/write_array.tmp").transform(function(data, index) {
        if (index % 10 === 9) {
          throw new Error("Error at index " + index);
        }
        return data;
      }).on('error', function(e) {
        error = true;
        e.message.should.equal('Error at index 9');
        return setTimeout(next, 100);
      }).on('data', function(data) {
        return data[1].should.be.below(9);
      }).on('end', function() {
        false.should.be.ok;
        return next();
      });
      _results = [];
      for (i = 0; i < 1000; i++) {
        _results.push(!error ? test.write(['Test ' + i, i, '"']) : void 0);
      }
      return _results;
    });
  });
}).call(this);
