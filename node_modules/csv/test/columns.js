(function() {
  var csv, fs, should;
  fs = require('fs');
  should = require('should');
  csv = require('..');
  describe('columns', function() {
    describe('in read option', function() {
      it('Test columns in true', function(next) {
        return csv().fromPath("" + __dirname + "/columns/in_true.in", {
          columns: true
        }).toPath("" + __dirname + "/columns/in_true.tmp").transform(function(data, index) {
          data.should.be.a('object');
          data.should.not.be.an["instanceof"](Array);
          if (index === 0) {
            data.FIELD_1.should.eql('20322051544');
          } else if (index === 1) {
            data.FIELD_4.should.eql('DEF');
          }
          return data;
        }).on('end', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/in_true.out").toString();
          result = fs.readFileSync("" + __dirname + "/columns/in_true.tmp").toString();
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/in_true.tmp");
          return next();
        });
      });
      return it('Test columns in named', function(next) {
        return csv().fromPath("" + __dirname + "/columns/in_named.in", {
          columns: ["FIELD_1", "FIELD_2", "FIELD_3", "FIELD_4", "FIELD_5", "FIELD_6"]
        }).toPath("" + __dirname + "/columns/in_named.tmp").transform(function(data, index) {
          data.should.be.a('object');
          data.should.not.be.an["instanceof"](Array);
          if (index === 0) {
            data.FIELD_1.should.eql('20322051544');
          } else if (index === 1) {
            data.FIELD_4.should.eql('DEF');
          }
          return data;
        }).on('data', function(data, index) {
          data.should.be.a('object');
          return data.should.not.be.an["instanceof"](Array);
        }).on('end', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/in_named.out").toString();
          result = fs.readFileSync("" + __dirname + "/columns/in_named.tmp").toString();
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/in_named.tmp");
          return next();
        });
      });
    });
    return describe('in write option', function() {
      it('should be the same length', function(next) {
        return csv().fromPath("" + __dirname + "/columns/out_no_transform.in").toPath("" + __dirname + "/columns/out_no_transform.tmp", {
          columns: ["FIELD_1", "FIELD_2"]
        }).on('data', function(data, index) {
          return data.should.be.an["instanceof"](Array);
        }).on('end', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/out_no_transform.out").toString();
          result = fs.readFileSync("" + __dirname + "/columns/out_no_transform.tmp").toString();
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/out_no_transform.tmp");
          return next();
        });
      });
      it('should filter from a transformed object', function(next) {
        return csv().fromPath("" + __dirname + "/columns/out_named.in").toPath("" + __dirname + "/columns/out_named.tmp", {
          columns: ["FIELD_1", "FIELD_2"]
        }).transform(function(data, index) {
          data.should.be.an["instanceof"](Array);
          return {
            FIELD_2: data[3],
            zombie: data[1],
            FIELD_1: data[4]
          };
        }).on('data', function(data, index) {
          data.should.be.a('object');
          return data.should.not.be.an["instanceof"](Array);
        }).on('end', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/out_named.out").toString();
          result = fs.readFileSync("" + __dirname + "/columns/out_named.tmp").toString();
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/out_named.tmp");
          return next();
        });
      });
      return it('should emit new columns in output', function(next) {
        return csv().fromPath("" + __dirname + "/columns/out_new.in", {
          columns: true
        }).toPath("" + __dirname + "/columns/out_new.tmp", {
          newColumns: true,
          header: true
        }).transform(function(data) {
          data.should.be.an.a('object');
          data.FIELD_7 = 'new_field';
          return data;
        }).on('end', function(count) {
          var expect, result;
          count.should.eql(2);
          expect = fs.readFileSync("" + __dirname + "/columns/out_new.out").toString();
          result = fs.readFileSync("" + __dirname + "/columns/out_new.tmp").toString();
          result.should.eql(expect);
          fs.unlink("" + __dirname + "/columns/out_new.tmp");
          return next();
        });
      });
    });
  });
}).call(this);
